generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Payment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  amount    Int
  bookingId String   @db.ObjectId
  method    String
  time      DateTime
  userId    String
}

model GameSession {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  bookingClose     DateTime
  bookingOpen      DateTime
  startTime        DateTime
  endTime          DateTime
  location         String
  maxUsers         Int
  CheckoutCartItem CheckoutCartItem[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  difficulty    String?
  accounts      Account[]
  sessions      Session[]
  CheckoutCart  CheckoutCart?
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Booking {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String   @db.ObjectId
  sessionId     String   @db.ObjectId
  createdAt     DateTime
  paymentMethod String   @db.ObjectId
  status        String
}

model CheckoutCart {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  userId           String             @unique @db.ObjectId // @id @map("_id") @db.ObjectId
  user             User               @relation(fields: [userId], references: [id])
  createdAt        DateTime
  status           String
  CheckoutCartItem CheckoutCartItem[]
}

model CheckoutCartItem {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  checkoutCartId String       @db.ObjectId
  CheckoutCart   CheckoutCart @relation(fields: [checkoutCartId], references: [id])
  gameSessionId  String       @db.ObjectId
  GameSession    GameSession  @relation(fields: [gameSessionId], references: [id])
  difficulty     String
}
