generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  difficulty    String?
  accounts      Account[]
  sessions      Session[]
  CheckoutCart  CheckoutCart?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Payment {
  id        Int      @id @default(autoincrement())
  amount    Int
  bookingId String
  method    String
  time      DateTime
  userId    String
}

model GameSession {
  id               Int                @id @default(autoincrement())
  bookingClose     DateTime
  bookingOpen      DateTime
  startTime        DateTime
  endTime          DateTime
  location         String
  maxUsers         Int
  CheckoutCartItem CheckoutCartItem[]
}

model Booking {
  id            Int      @id @default(autoincrement())
  userId        String
  sessionId     String
  createdAt     DateTime @default(now())
  paymentMethod String
  status        String
}

model CheckoutCart {
  id               Int                @id @default(autoincrement())
  userId           String             @unique
  user             User               @relation(fields: [userId], references: [id])
  createdAt        DateTime           @default(now())
  status           String
  CheckoutCartItem CheckoutCartItem[]
}

model CheckoutCartItem {
  id             Int          @id @default(autoincrement())
  checkoutCartId Int
  CheckoutCart   CheckoutCart @relation(fields: [checkoutCartId], references: [id])
  gameSessionId  Int
  GameSession    GameSession  @relation(fields: [gameSessionId], references: [id])
  difficulty     String
}
